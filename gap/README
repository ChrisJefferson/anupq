The ANU Pq Package

The   ANU  pq  provides  access  to  implementations   of  the  following
algorithms:

1.  A p-quotient algorithm  to compute  a power-commutator presentation
for a group  of  prime power order.  The  algorithm implemented  here  is
based on that described in Newman and O'Brien (1996), Havas and Newman 
(1980), and papers referred to there.   Another  description  of  the  
algorithm appears in  Vaughan-Lee (1990).  A FORTRAN implementation  of 
this algorithm  was  programmed  by Alford and Havas.  The basic  data 
structures  of that implementation are retained.

2. A p-group generation algorithm to generate descriptions of groups of
prime  power  order.   The  algorithm  implemented here is based  on  the
algorithms described in Newman  (1977)  and O'Brien  (1990).  A  FORTRAN
implementation of  this  algorithm  was  earlier  developed by Newman and
O'Brien.

3.   A  standard presentation   algorithm  used  to compute  a  canonical
power-commutator presentation  of a p-group. The  algorithm implemented
here is described in O'Brien (1994).

4. An algorithm which can be used to compute  the automorphism group of a
p-group. The algorithm implemented here is described in O'Brien (1994).

The following section describes the installation of the ANU pq package, a
description of the functions available in the  ANU pq package is given in
chapter "ANU Pq in GAP 4".
For  details about  the implementation and the standalone version see the
file README. This implementation was developed in C by

Eamonn O'Brien
Department of Mathematics
University of Auckland
Private Bag 92019
Auckland
New Zealand

e-mail: obrien@math.auckland.ac.nz 

Installing the ANU pq Package
-----------------------------

The ANU pq  is written in C  and the package can only  be installed under
UNIX.  It has been tested on DECstation running Ultrix, a HP 9000/700 and
HP 9000/800 running HP-UX, a MIPS running RISC/os Berkeley, a NeXTstation
running  NeXTSTEP 3.0,  SUNs running  SunOS and  Intel Pentium  based PCs
running Linux.

In the example we  will show how a user 'me' installs  the ANU pq package
on a  PC called  'mypc' running Linux.   It is  assumed that GAP  4 is
already  installed on this  machine and  the GAP  programme is  in the
directory '/usr/local/bin/gap4'.

Note that  certain parts  of the  output in the  examples should  only be
taken as rough  outline, especially file sizes and file  dates are not to
be  taken literally.   For the  sake  of brevity  directory listings  are
usually shown shorter than they really are.

First of all you have to get the file 'anupq.zoo' from the GAP 4 share
packages page on the GAP server in St Andrews or one of its mirrors.

        www-gap.dcs.st-and.ac.uk/~gap/Info4/share.html

Then locate  the GAP  directory of the  GAP 4 installation  on your
system.   This  directory  contains,  among others,  'lib/',  'doc/'  and
'pkg/'.   The GAP directory  itself is  usually called  'gap4r2'.  The
last digit is the revision number which may be higher on your system.

    me@mypc > ls -l
    drwxr-xr-x   15 me   mygroup         1024 Mar 23 17:25 gap4r2
    -rw-r--r--   1  me   mygroup       560891 Dec 27 15:16 anupq.zoo
    me@mypc > ls -l gap4r2
    -rw-r--r--    1 me   mygroup        36930 Feb 29  2000 INSTALL
    drwxr-xr-x    3 me   mygroup         1024 Mar 23 17:25 bin
    -rwxr-xr-x    1 me   mygroup        36562 Jul  9  1999 configure
    drwxr-xr-x    8 me   mygroup         1024 Mar 23 17:19 doc
    drwxr-xr-x    2 me   mygroup         1024 Mar 23 17:19 grp
    drwxr-xr-x    2 me   mygroup         8192 Mar 23 17:19 lib
    drwxr-xr-x    3 me   mygroup         1024 Mar 23 17:19 pkg
    -rw-r--r--    1 me   mygroup           30 Mar 23 17:25 sysinfo.gap
    -rw-r--r--    1 me   mygroup           22 Jul 16  1998 sysinfo.in
    [...]

Unpack the package using 'unzoo'.  Note that you must be in the directory
'gap4r2/pkg' to unpack the files.  After you have unpacked the source you
may remove the .zoo file.  A version of unzoo is available from

        http://www-gap.dcs.st-and.ac.uk/~gap/Info4/distrib.html

The result should like like this:

    me@mypc > cd gap4r2/pkg
    me@mypc > mv ../../anupq.zoo .
    me@mypc > unzoo x anupq
    [..unpack messages..]
    me@mypc > cd anupq
    me@mypc > ls -l
    -rw-r--r--    1 me   mygroup  10167 Aug 12  1998 README
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 TEST
    drwxr-sr-x    3 me   mygroup   4096 Mar 24 13:52 bin
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 doc
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 examples
    drwxr-sr-x    6 me   mygroup   4096 Mar 24 13:58 gap
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 include
    lrwxrwxrwx    1 me   mygroup     10 Feb  5 09:31 init.g -> gap/init.g
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 isom
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:52 magma
    lrwxrwxrwx    1 me   mygroup     10 Feb  5 09:31 read.g -> gap/read.g
    drwxr-sr-x    2 me   mygroup   8192 Mar 24 13:57 src

Change into the subdirectory 'gap'.  Typing 'make' will produce a list of
possible target.

me@mypc:../anupq > cd gap
me@mypc:../anupq > make
usage: 'make <target> EXT=<ext>'  where <target> is one of
'dec-mips-ultrix-gcc2-gmp' for DECstations under Ultrix with gcc/gmp
'dec-mips-ultrix-cc-gmp'   for DECstations under Ultrix with cc/gmp

 [..messages deleted..]

'unix-gmp'                 for a generic unix system with cc/gmp
'unix'                     for a generic unix system with cc
'clean'                    remove all created files

   where <ext> should be a sensible extension, i.e.,
   'EXT=-sun-sparc-sunos' for SUN 4 or 'EXT=' if the PQ only
   runs on a single architecture

   targets are listed according to preference,
   i.e., 'sun-sparc-sunos-gcc2' is better than 'sun-sparc-sunos-cc'.
   additional C compiler and linker flags can be passed with
   'make <target> COPTS=<compiler-opts> LOPTS=<linker-opts>',
   i.e., 'make sun-sparc-sunos-cc COPTS=-g LOPTS=-g'.

   set GAP if gap is not started with the command 'gap',
   i.e., 'make sun-sparc-sunos-cc GAP=/home/gap/bin/gap-4.2'.

   in order to use the GNU multiple precision (gmp) set
   'GNUINC' (default '/usr/local/include') and 
   'GNULIB' (default '/usr/local/lib')

Select the appropriate target.  If  you have the *GNU* multiple precision
arithmetic (gmp)  installed on your  system, select the target  ending in
'-gmp'.  Note that  the gmp  is  *not required*.

    me@mypc:../anupq > make unix GAP=/usr/local/bin/gap4
    [..compiler messages..]

The executable pq programm is put into the directory 'anupq/bin/<system>'
where '<system>'  is a string  encoding the architecture of  your system,
the compiler used, etc.  It is obtained from the file gap4r2/sysinfo.gap.
In our case it is 'i686-pc-linux-gnu-gcc'.  The reason for putting the pq
executable into  a directory  with this  name is that  this is  the place
where  the GAP~4  mechanism  for loading  share  packages expects  the
executable to be.

    me@mypc > ls -l ../bin/                      
    drwxr-sr-x    2 me   mygroup   4096 Mar 24 13:47 i686-pc-linux-gnu-gcc
    me@mypc > ls -l ../bin/i686-pc-linux-gnu-gcc/
    -rwxr-xr-x    1 me   mygroup 221875 Mar 24 13:48 pq

The GAP documentation is compiled by running TeX on the file manual.tex:

    me@mypc > cd doc
    me@mypc > tex manual
    This is TeX, Version 3.14159 (Web2C 7.3.1)
    [..TeX compilation messages..]
    Output written on manual.dvi (19 pages, 43516 bytes).
    Transcript written on manual.log.


Now it is time to test  the installation.  The  first test will only test
the ANU pq.

    me@mypc > cd ../..
    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test1.pga
    # a lot of messages ending in
    **************************************************
    Starting group: c3c3 # 2;2 # 4;3
    Order: 3^7
    Nuclear rank: 3
    3-multiplicator rank: 4
    # of immediate descendants of order 3^8 is 7
    # of capable immediate descendants is 5

    **************************************************
    34 capable groups saved on file c3c3_class4
    Construction of descendants took 1.92 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 1.97
    me@mypc:../anupq > ls -l c3c3*
    total 89
    -rw-r--r--    1 gap    3320 Jun 24 11:24 c3c3_class2
    -rw-r--r--    1 gap    5912 Jun 24 11:24 c3c3_class3
    -rw-r--r--    1 gap   56184 Jun 24 11:24 c3c3_class4
    gap:../anupq > rm c3c3_class*

The second test will test the stacksize. If it is too small you will  get
a memory fault, try to raise the stacksize as described above.

    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test2.pga
    # a lot of messages ending in
    **************************************************
    Starting group: c2c2 # 1;1 # 1;1 # 1;1
    Order: 2^5
    Nuclear rank: 1
    2-multiplicator rank: 3
    Group c2c2 # 1;1 # 1;1 # 1;1 is an invalid starting group

    **************************************************
    Starting group: c2c2 # 2;1 # 1;1 # 1;1
    Order: 2^5
    Nuclear rank: 1
    2-multiplicator rank: 3
    Group c2c2 # 2;1 # 1;1 # 1;1 is an invalid starting group
    Construction of descendants took 0.47 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 0.50
    me@mypc:../anupq > ls -l c2c2*
    total 45
    -rw-r--r--    1 gap   6228 Jun 24 11:25 c2c2_class2
    -rw-r--r--    1 gap  11156 Jun 24 11:25 c2c2_class3
    -rw-r--r--    1 gap   2248 Jun 24 11:25 c2c2_class4
    -rw-r--r--    1 gap      0 Jun 24 11:25 c2c2_class5
    me@mypc > rm c2c2_class*

The third example tests the link between the ANU pq and GAP.  If there is
a problem  you will get a error  message saying 'Error in  system call to
GAP'; if this happens, check the environment variable 'ANUPQ_GAP_EXEC'.

    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test3.pga
    [..messages from the ANU pq..]
    **************************************************
    Starting group: c5c5 # 1;1 # 1;1
    Order: 5^4
    Nuclear rank: 1
    5-multiplicator rank: 2
    # of immediate descendants of order 5^5 is 2

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2
    Order: 5^5
    Nuclear rank: 3
    5-multiplicator rank: 3
    # of immediate descendants of order 5^6 is 3
    # of immediate descendants of order 5^7 is 3
    # of capable immediate descendants is 1
    # of immediate descendants of order 5^8 is 1
    # of capable immediate descendants is 1

    **************************************************
    2 capable groups saved on file c5c5_class4

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2 # 4;2
    Order: 5^7
    Nuclear rank: 1
    5-multiplicator rank: 2
    # of immediate descendants of order 5^8 is 2
    # of capable immediate descendants is 2

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2 # 7;3
    Order: 5^8
    Nuclear rank: 2
    # of immediate descendants of order 5^9 is 1
    # of capable immediate descendants is 1
    # of immediate descendants of order 5^10 is 1
    # of capable immediate descendants is 1

    **************************************************
    4 capable groups saved on file c5c5_class5
    Construction of descendants took 0.62 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 0.68
    me@mypc > ls -l c5c5*
    total 41
    -rw-r--r--    1 gap     924 Jun 24 11:27 c5c5_class2
    -rw-r--r--    1 gap    2220 Jun 24 11:28 c5c5_class3
    -rw-r--r--    1 gap    3192 Jun 24 11:30 c5c5_class4
    -rw-r--r--    1 gap    7476 Jun 24 11:32 c5c5_class5
    me@mypc > rm c5c5_class*

The fourth test will test the standard presentation part of the pq.

    me@mypc > bin/pq -i -k < gap/tst/test4.sp
    [..messages from the ANU pq..]
    Computing standard presentation for class 5 took 0.03 seconds

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 6.97
    me@mypc > ls -l SPRES
    -rw-r--r--    1 me   mygroup        488 Mar 27 11:40 SPRES
    me@mypc > diff SPRES gap/out4.sp
    # there should be no difference if compiled with '-gmp'
    156250000
    me@mypc > rm SPRES

The last  test  will test the  link  between GAP and   the ANU pq.  If
everything goes well you should not see any message.

    me@mypc > gap -b
    gap> RequirePackage( "anupq" );
    gap> ReadTest( "gap/tst/anupga.tst" );
    gap>
