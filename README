                         The ANUPQ share package
                         -----------------------

The ANUPQ share package is a GAP4 interface with the  ANU  pq  C  program
written by Eamonn O'Brien. The  ANU  pq  C  program  provides  access  to
implementations of the following algorithms:

1. A p-quotient algorithm to compute a power-commutator presentation  for
a group of prime power order. The algorithm implemented here is based  on
that described in Newman and O'Brien (1996), Havas and Newman (1980), and
papers referred to there. Another description of the algorithm appears in
Vaughan-Lee (1990).  A  FORTRAN  implementation  of  this  algorithm  was
programmed by Alford  and  Havas.  The  basic  data  structures  of  that
implementation are retained.

2. A p-group generation algorithm to generate descriptions of  groups  of
prime power order.  The  algorithm  implemented  here  is  based  on  the
algorithms described in Newman  (1977)  and  O'Brien  (1990).  A  FORTRAN
implementation of this algorithm was  earlier  developed  by  Newman  and
O'Brien.

3. A  standard  presentation  algorithm  used  to  compute  a   canonical
power-commutator presentation of a  p-group.  The  algorithm  implemented
here is described in O'Brien (1994).

4. An algorithm which can be used to compute the automorphism group of  a
p-group. The algorithm implemented here is described in O'Brien (1994).

The following section describes  the  installation  of  the  ANUPQ  share
package. A description of the functions  available  in  the  ANUPQ  share
package is given in the share package manual in the  doc  directory.  For
details about the implementation  and  the  standalone  version  see  the
README and guide.dvi in the standalone-doc directory. As mentioned  above
the implementation in C was written by

Eamonn O'Brien
Department of Mathematics
University of Auckland
Private Bag 92019
Auckland
New Zealand

e-mail: obrien@math.auckland.ac.nz 

                    Obtaining the ANUPQ share package
                    ---------------------------------

Note that, owing to its C code component, the  ANUPQ  share  package  can
only be installed under UNIX. It has been tested  on  DECstation  running
Ultrix, a HP 9000/700 and HP  9000/800  running  HP-UX,  a  MIPS  running
RISC/os Berkeley, a NeXTstation running NeXTSTEP 3.0, SUNs running  SunOS
and Intel Pentium based PCs running Linux.

You can download `anupq.zoo', a `zoo' archive containing the ANUPQ  share
package from the same places as GAP. The main FTP servers are:

ftp://ftp-gap.dcs.st-and.ac.uk/pub/gap/gap4/share/
ftp://ftp.math.rwth-aachen.de/pub/gap4/share/
ftp://ftp.ccs.neu.edu/pub/mirrors/ftp-gap.dcs.st-and.ac.uk/pub/gap/gap4/share/
ftp://pell.anu.edu.au/pub/algebra/gap4/share/

`anupq.zoo' is also available via the GAP www page at

http://www-gap.dcs.st-and.ac.uk/~gap/Info4/share.html
http://www.math.rwth-aachen.de/~GAP/Info4/share.html
http://mirrors.ccs.neu.edu/GAP/NEU/Info4/share.html
http://wwwmaths.anu.edu.au/research.groups/algebra/GAP/www/Info4/share.html

                   Installing the ANUPQ share package
                   ----------------------------------

To install the ANUPQ share package, move the file  `anupq.zoo'  into  the
`pkg' directory in which you plan to install ANUPQ. Usually, this will be
the directory `pkg' in the hierarchy of your version of GAP 4.  (However,
it is also possible to keep an additional `pkg' directory in your private
directories, see section "ref:Installing Share Packages"  of  the  GAP  4
reference manual for details on how to do this.)

Then unzoo `anupq.zoo' by

  unzoo -x anupq

Change directory to the newly created `anupq' directory. Now you need  to
call `configure <path>'  where  <path>  is  the  path  to  the  GAP  home
directory. So for example if you install the package in  the  main  `pkg'
directory call

  ./configure ../..

This will fetch the architecture type for which  GAP  has  been  compiled
last, create a `Makefile' and list a number of ``targets'' to call `make'
with. If you have one of  the  standard  linux  (or  NetBSD  or  FreeBSD)
systems with `gcc', wish to compile with  `-O2'  optimisation,  and  have
`gmp' with its include and  library  files  in  `/usr/local/include'  and
`/usr/local/lib', respectively, you can now simply call

  make

to compile the binary and to install it in the appropriate place.

If you need a special target (perhaps you don't have `gmp' or you are not
on a linux, NetBSD or FreeBSD system) then you need to call `make' with a
target argument. If  the  targets  displayed  on  the  screen  after  the
`configure' step rushed past your eyes and you can't scroll back  to  see
them, you can ``pipe'' those same targets through `less' or `more',  e.g.
with `more':

  make unknown | more

An abbreviation of the target list is as follows:

'linux-iX86-gcc2-gmp'      for IBM x86 PCs under linux/BSD with GNU cc 2 and mp
'linux-iX86-cc-gmp'        for IBM x86 PCs under linux/BSD with cc and GNU mp
'linux-iX86-gcc2'          for IBM x86 PCs under linux/BSD with GNU cc 2
'linux-iX86-cc'            for IBM x86 PCs under linux/BSD with cc (GNU)
[... 16 lines deleted ...]
'sunos-gcc2-gmp'           for SunOS with GNU cc 2 and gmp
'sunos-cc-gmp'             for SunOS with cc and GNU mp
'sunos-gcc2'               for SunOS with GNU cc 2
'sunos-cc'                 for SunOS with cc
'unix-gmp'                 for a generic unix system with cc and GNU mp
'unix'                     for a generic unix system with cc
'clean'                    remove all created files

   targets are listed according to preference,
   i.e., 'sunos-gcc2' is better than 'sunos-cc'
   no target is the same as choosing 'linux-iX86-gcc2-gmp'
   additional C compiler and linker flags can be passed with
   'make <target> COPTS=<compiler-opts> LOPTS=<linker-opts>',
   e.g., 'make sunos-cc COPTS=-g LOPTS=-g'.

   set GAP if GAP4 is not started with the command 'gap',
   e.g., 'make sunos-cc GAP=/usr/local/bin/gap4'.

   in order to use the GNU multiple precision (gmp) set
   'GNUINC' (default '/usr/local/include') and 
   'GNULIB' (default '/usr/local/lib')

   do 'make unknown | more' to see these targets again via more

Let's suppose that the `linux-iX86-gcc2-gmp' target does not satisfy your
requirements; let's suppose your system is Solaris 2.8 (i.e  SunOS  5.8),
you have `gmp' but its include  and  library  directories  are  somewhere
else, and that `gap4' is the command used to initiate  GAP  4.  Then  the
following `make' call might be correct in this case:

  make sunos-gcc2-gmp GAP=gap4 GNUINC=/opt/local/include GNULIB=/opt/local/lib

If you  don't  have  the  *GNU*  multiple  precision  arithmetic  (`gmp')
installed on your system, not to worry, `gmp'  is  *not  required*;  just
select an appropriate target without `-gmp'.

           Establishing the ANUPQ share package documentation
           --------------------------------------------------

The ANUPQ share package documentation source files are found in the `doc'
directory. There you should also find  `manual.dvi'.  It  should  not  be
necessary for you to re-create the documentation. An HTML version of  the
ANUPQ share package manual  is  provided  in  the  `htm'  directory  with
initial page `chapters.htm'. If you have deleted the TeX DVI  version  of
the manual and need to recreate it (and the `.lab' and `.toc'  files  are
still present) then just do

  tex manual

once in this directory to obtain `manual.dvi'. If  you  have  `pdftex'  a
`PDF' version is obtained just as easily:

  pdftex manual

generates `manual.pdf'. If you need a PostScript version, on most systems
a file `manual.ps' will be generated by

  tex manual; dvips manual -o

You can safely discard the  files  with  extensions  `.aux',  `.idx'  and
`.log'. Not too much harm is done by removing the files  with  extensions
`.lab' and `.toc'; just be aware that if you ever need to re-generate the
`.dvi' or `.pdf' file you will need to `tex' or `pdftex' twice  if  these
files are removed (the first `tex' or `pdftex' pass re-establishes  these
files). Although the `.six' file  is  re-generated  each  time  `tex'  or
`pdftex' is performed  on  `manual',  it  should  *not*  be  removed;  it
provides the ``section index'' used by the on-line help.  You  must  also
keep the `.ind' file; there is no way to re-generate it if it is removed.

              Testing the ANUPQ share package installation
              --------------------------------------------

Now it is time to test the installation. The first test  only  tests  the
ANU pq binary.

    me@mypc > cd ../..
    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test1.pga
    # a lot of messages ending in
    **************************************************
    Starting group: c3c3 # 2;2 # 4;3
    Order: 3^7
    Nuclear rank: 3
    3-multiplicator rank: 4
    # of immediate descendants of order 3^8 is 7
    # of capable immediate descendants is 5

    **************************************************
    34 capable groups saved on file c3c3_class4
    Construction of descendants took 1.92 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 1.97
    me@mypc > ls -l c3c3*
    total 89
    -rw-r--r--    1 gap    3320 Jun 24 11:24 c3c3_class2
    -rw-r--r--    1 gap    5912 Jun 24 11:24 c3c3_class3
    -rw-r--r--    1 gap   56184 Jun 24 11:24 c3c3_class4
    me@mypc > rm c3c3_class*

The second test tests the stacksize. If it is too small you  will  get  a
memory fault.

    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test2.pga
    # a lot of messages ending in
    **************************************************
    Starting group: c2c2 # 1;1 # 1;1 # 1;1
    Order: 2^5
    Nuclear rank: 1
    2-multiplicator rank: 3
    Group c2c2 # 1;1 # 1;1 # 1;1 is an invalid starting group

    **************************************************
    Starting group: c2c2 # 2;1 # 1;1 # 1;1
    Order: 2^5
    Nuclear rank: 1
    2-multiplicator rank: 3
    Group c2c2 # 2;1 # 1;1 # 1;1 is an invalid starting group
    Construction of descendants took 0.47 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 0.50
    me@mypc:../anupq > ls -l c2c2*
    total 45
    -rw-r--r--    1 gap   6228 Jun 24 11:25 c2c2_class2
    -rw-r--r--    1 gap  11156 Jun 24 11:25 c2c2_class3
    -rw-r--r--    1 gap   2248 Jun 24 11:25 c2c2_class4
    -rw-r--r--    1 gap      0 Jun 24 11:25 c2c2_class5
    me@mypc > rm c2c2_class*

The third example tests the link between the ANU pq binary  and  GAP.  If
there is a problem you will get a error message saying `Error  in  system
call  to  GAP';  if  this  happens,  check   the   environment   variable
`ANUPQ_GAP_EXEC'.

    me@mypc > bin/i686-pc-linux-gnu-gcc/pq < gap/tst/test3.pga
    [..messages from the ANU pq..]
    **************************************************
    Starting group: c5c5 # 1;1 # 1;1
    Order: 5^4
    Nuclear rank: 1
    5-multiplicator rank: 2
    # of immediate descendants of order 5^5 is 2

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2
    Order: 5^5
    Nuclear rank: 3
    5-multiplicator rank: 3
    # of immediate descendants of order 5^6 is 3
    # of immediate descendants of order 5^7 is 3
    # of capable immediate descendants is 1
    # of immediate descendants of order 5^8 is 1
    # of capable immediate descendants is 1

    **************************************************
    2 capable groups saved on file c5c5_class4

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2 # 4;2
    Order: 5^7
    Nuclear rank: 1
    5-multiplicator rank: 2
    # of immediate descendants of order 5^8 is 2
    # of capable immediate descendants is 2

    **************************************************
    Starting group: c5c5 # 1;1 # 2;2 # 7;3
    Order: 5^8
    Nuclear rank: 2
    # of immediate descendants of order 5^9 is 1
    # of capable immediate descendants is 1
    # of immediate descendants of order 5^10 is 1
    # of capable immediate descendants is 1

    **************************************************
    4 capable groups saved on file c5c5_class5
    Construction of descendants took 0.62 seconds

    Select option: 0 
    Exiting from p-group generation

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 0.68
    me@mypc > ls -l c5c5*
    total 41
    -rw-r--r--    1 gap     924 Jun 24 11:27 c5c5_class2
    -rw-r--r--    1 gap    2220 Jun 24 11:28 c5c5_class3
    -rw-r--r--    1 gap    3192 Jun 24 11:30 c5c5_class4
    -rw-r--r--    1 gap    7476 Jun 24 11:32 c5c5_class5
    me@mypc > rm c5c5_class*

The fourth test tests the  standard  presentation  part  of  the  ANU  pq
binary.

    me@mypc > bin/pq -i -k < gap/tst/test4.sp
    [..messages from the ANU pq binary..]
    Computing standard presentation for class 5 took 0.03 seconds

    Select option: 0 
    Exiting from ANU p-Quotient Program
    Total user time in seconds is 6.97
    me@mypc > ls -l SPRES
    -rw-r--r--    1 me   mygroup        488 Mar 27 11:40 SPRES
    me@mypc > diff SPRES gap/out4.sp
    # there should be no difference if compiled with '-gmp'
    156250000
    me@mypc > rm SPRES

The last test tests the link between  GAP  and  the  ANU  pq  binary.  If
everything goes well you should not see any message.

    me@mypc > gap -b
    gap> RequirePackage( "anupq" );
    gap> ReadTest( "gap/tst/anupga.tst" );
    gap>
